{
    "id":3,
    "header":"How this blog works",
    "content":"<p>After I launched this blog, some people asked me to share an info about how this blog is made, what library or framework it uses etc. I'm going to write about it in this post.</p><br /><p>The frontend part of a blog is implemented in JavaScript, with minimal HTML boilerplate (view source to see it). I don't use any popular JS library, instead I use my own lightweight library. All core objects are located in core.js file, and they are Ajax, Model, Router and View.</p><br /><p>Frontend uses history, and all content is dynamic – page needs no reload. Views are JS template files – all DOM is generated from JSON objects or strings. This actually makes sense because I don't need to generate HTML on backend and also I can work with templates and data in much simplier manner. Function create() makes a new DOM element which then can be attached to any other element. Function returns reference of created node and this allows me to avoid selecting via getElementById() or similar.</p><br /><p>Example:</p><pre>center = create({\n    tag:\"div\",\n    className: \"wrapper\",\n    click:handleClick\n}).appendTo(document.body)</pre><p>Here I created an element from JSON object and appended it to document's body.</p><br /><pre>headerElement = create(\"tag=div,className=headerElement\").appendTo(center)</pre><p>Here I created an element from string and appended to previously created element without selecting it via selector functions.</p><br /><p>Engine can use any kind of backend that is able to return data as JSON object. Also, it is possible to use “static” models – simple JSON files with data, for lightweight pages like this blog. A property Router.is_static can be set to true in rules.js to use static models. This allows to not use any backend environment like PHP ir Node.js. I tried to use a simple backend written in Haskell, but later I switched to static models.</p><br /><p>All templates are JS files that use data (usually received from model call) and construct DOM nodes using create() method. Example call of View.forge() method:</p><pre>View.forge(\"posts.js\", Model.get(\"/posts/\"), contentElement)</pre><p>This will include templates/posts.js, pass data from “posts” model to it and append resulting nodes to contentElement.</p><br /><p>Example template:</p><pre>var post = create({\n    tag : \"div\",\n    className : \"post\",\n    child: [\n        {\n            tag: \"h2\",\n            className : \"post-header\",\n            innerHTML: data.header\n        }\n    ]\n}).appendTo(parentEl || document.body);</pre><br /><p>All routes are described in rules.js file. Example rule is:</p><pre>{\n    rule: \"\/post\/.*\",\n    action: Posts.viewPost\n}</pre><br /><p>Routes for static models are there as well:</p><pre>{\n    name: \"posts\",\n    path: \"posts.js\"\n}</pre><br /><p>You can see the whole code <a target=\"_blank\" href=\"https://github.com/ivanovsaleksejs/js-blog\">here</a>.</p><br /><br />",
    "url":"how_this_blog_works",
    "user":"Aleksejs",
    "date":"19 01 2016"
}
